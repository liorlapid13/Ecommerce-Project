# Known Issues

Question 10 -> 	We scan the product list twice. 
	Once to print all products.
	Second time to let buyer select product.
Location: menu.cpp

C'tors -> In classes which have dynamic fields, we initialized
	these fields with nullptr for the setters.
	Our setters delete the field to make sure no memory is lost
	in case of setters being used to change an existing value.
	When the c'tor calls the setters, if the fields are not initialized,
	then the program would crash.

Input Parameters -> In the constructors, we call setter methods which have
	input checks that only create objects if all fields meet the requirements.
	Therefore if any field is entered incorectly then the object will not
	be created but the program will not exit. We require correct inputs
	in order for the program to work correctly.
	All prerequisites are mentioned in the detailed user guide located in the README file.

Input Parameters -> When receiving an input from user for parameters,
	we set a static max-length for each parameter.
	As instructed by our Professors, 
	we assume that the user does not input anything longer than
	the set max-length.
		For example: username, password, product name, etc...

Shopping Cart -> Our system does not manage product quantity.
	Therefore you can add multiple copies of the same item
 	to your shopping cart.

Date in feedbacks -> Our only requirements for date in feedback are for a 
	valid date to be entered.
	We also set a minimum/maximum valid year range as constants.
	The reason for this being our lack of knowledge on how to get
	the current time from the system.

Creating feedbacks -> In the feedback creation process, we first ask
	the user to enter his feedback details.
	Those details are then sent to a different method to check if
	a feedback for the selected product has already been submitted.
	Therefore, in case of a previously submitted feedback, we could
	have avoided creating the feedback details as they are deleted
	shortly after creation without use.
		
Operators without consts -> Our operators do not include consts because most of
	our objects have non-const getters which let them be editted in the program.
	For example, shopping cart's getter is not const because after use, the
	shopping cart may be changed (products may be added for example).